{
  "version": 3,
  "sources": ["../node_modules/retry/lib/retry_operation.js", "../node_modules/retry/lib/retry.js", "../node_modules/retry/index.js", "../node_modules/async-retry/lib/index.js", "../src/lib/clientUtils.ts", "../src/lib/constants.ts", "../src/lib/useMultipartUpload.ts"],
  "sourcesContent": ["function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n", "var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n", "module.exports = require('./lib/retry');", "// Packages\nvar retrier = require('retry');\n\nfunction retry(fn, opts) {\n  function run(resolve, reject) {\n    var options = opts || {};\n    var op;\n\n    // Default `randomize` to true\n    if (!('randomize' in options)) {\n      options.randomize = true;\n    }\n\n    op = retrier.operation(options);\n\n    // We allow the user to abort retrying\n    // this makes sense in the cases where\n    // knowledge is obtained that retrying\n    // would be futile (e.g.: auth errors)\n\n    function bail(err) {\n      reject(err || new Error('Aborted'));\n    }\n\n    function onError(err, num) {\n      if (err.bail) {\n        bail(err);\n        return;\n      }\n\n      if (!op.retry(err)) {\n        reject(op.mainError());\n      } else if (options.onRetry) {\n        options.onRetry(err, num);\n      }\n    }\n\n    function runAttempt(num) {\n      var val;\n\n      try {\n        val = fn(bail, num);\n      } catch (err) {\n        onError(err, num);\n        return;\n      }\n\n      Promise.resolve(val)\n        .then(resolve)\n        .catch(function catchIt(err) {\n          onError(err, num);\n        });\n    }\n\n    op.attempt(runAttempt);\n  }\n\n  return new Promise(run);\n}\n\nmodule.exports = retry;\n", "import retry from \"async-retry\";\nimport {\n  CREATE_MULTIPART_STRING,\n  COMPLETE_MULTIPART_STRING,\n  CREATE_PUT_PART_URL_STRING,\n} from \"./constants\";\n\nexport type UploadCompletedData = {\n  uploadId: string;\n  key: string;\n  url: string;\n  access: string;\n  completedData: any;\n  metadata: FileMetadata;\n};\nexport type FileMetadata = {\n  name: string;\n  size: number;\n  type: string;\n};\n\nexport const MB = 1024 * 1024;\nexport const PART_SIZE = 8 * MB;\n\nexport const createMultipartUpload = async (\n  handler: string = \"/api/upload\"\n) => {\n  const init: RequestInit = {\n    method: \"POST\",\n    body: JSON.stringify({\n      intent: CREATE_MULTIPART_STRING,\n    }),\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  };\n  let response;\n  try {\n    response = await fetch(handler, init).then((res) => res.json());\n  } catch (error: unknown) {\n    throw error instanceof Error\n      ? error\n      : new Error(\"Error on post to handler\");\n  }\n  return response;\n};\n\nconst getPutPartUrl = async ({\n  partNumber,\n  uploadId,\n  handler = \"/api/upload\",\n  key,\n}: {\n  handler?: string;\n  partNumber: number;\n  uploadId: string;\n  key: string;\n}) => {\n  return retry(\n    async () => {\n      const response = await fetch(handler, {\n        method: \"POST\",\n        body: JSON.stringify({\n          partNumber,\n          uploadId,\n          key,\n          intent: CREATE_PUT_PART_URL_STRING,\n        }),\n      });\n      return await response.text();\n    },\n    { retries: 5 }\n  );\n};\n\nconst uploadOnePartRetry = async ({\n  attempts = 5,\n  url,\n  blob,\n}: {\n  url: string;\n  blob: Blob;\n  attempts?: number;\n}) => {\n  let retryCount = 0;\n  return await retry(\n    async (bail: Function) => {\n      const response = await fetch(url, {\n        method: \"PUT\",\n        body: blob,\n      });\n      console.log(\"RETRY: \", response);\n      // @todo abort and content-type?\n      if (403 === response.status) {\n        bail(new Error(\"Unauthorized\"));\n        return;\n      } else if (response.ok) {\n        return response;\n      } else {\n        throw new Error(\"Unknown error\");\n      }\n    },\n    {\n      retries: attempts,\n      onRetry: (error: unknown) => {\n        retryCount = retryCount + 1;\n        if (error instanceof Error) {\n          console.log(`retrying #${retryCount} Put request of ${url}`);\n        }\n      },\n    }\n  );\n};\n\nexport const uploadAllParts = async (options: {\n  file: File;\n  numberOfParts: number;\n  uploadId: string;\n  key: string;\n  onUploadProgress?: (event: {\n    total: number;\n    loaded: number;\n    percentage: number;\n  }) => void;\n  handler?: string;\n}) => {\n  const { file, numberOfParts, uploadId, key, onUploadProgress, handler } =\n    options;\n  let loaded = 0; // the magic is just a let \uD83E\uDE84\u2728\uD83E\uDDF7\n  const uploadPromises = Array.from({ length: numberOfParts }).map(\n    async (_, i: number) => {\n      const url = await getPutPartUrl({\n        partNumber: i + 1,\n        uploadId,\n        key,\n        handler,\n      });\n      const start = i * PART_SIZE;\n      const end = Math.min(start + PART_SIZE, file.size);\n      const blob = file.slice(start, end); // directly from disk, no mainthread \uD83E\uDD29\n      const response = await uploadOnePartRetry({ url, blob }); // trhow error after 5 retrys\n      loaded += blob.size; // exact sum\n      const percentage = (loaded / file.size) * 100;\n      onUploadProgress?.({ total: file.size, loaded, percentage }); // on progress\n      const str = response.headers.get(\"ETag\");\n      return String(str).replaceAll('\"', \"\"); // cleaun up\n    }\n  );\n  return (await Promise.all(uploadPromises)) as string[]; // [etag,etag]\n};\n\nexport const completeMultipart = async (args: {\n  key: string;\n  uploadId: string;\n  etags: string[];\n  metadata: FileMetadata;\n  handler?: string;\n}) => {\n  const { key, etags, uploadId, metadata, handler = \"/api/upload\" } = args;\n  return await retry(async () => {\n    const res = await fetch(handler, {\n      method: \"POST\",\n      body: JSON.stringify({\n        intent: COMPLETE_MULTIPART_STRING,\n        contentType: metadata.type,\n        size: metadata.size,\n        metadata,\n        uploadId,\n        etags,\n        key,\n      }),\n    });\n    return await res.json();\n  }); // default retrys (10)\n};\n", "export const CREATE_MULTIPART_STRING = \"create_multipart_upload\";\nexport const CREATE_PUT_PART_URL_STRING = \"create_put_part_url\";\nexport const COMPLETE_MULTIPART_STRING = \"complete_multipart_upload\";\n", "import {\n  completeMultipart,\n  createMultipartUpload,\n  PART_SIZE,\n  uploadAllParts,\n  type FileMetadata,\n  type UploadCompletedData,\n} from \"./clientUtils\";\n\n// client\nexport const useUploadMultipart = (options?: {\n  onUploadProgress?: (event: {\n    total: number;\n    loaded: number;\n    percentage: number;\n  }) => void;\n  handler?: string;\n  access?: \"public\";\n  multipart?: true;\n}) => {\n  const {\n    access = \"public\", // @todo implement ACL\n    handler,\n    onUploadProgress,\n    multipart,\n  } = options || {};\n\n  const upload = async (fileName: string, file: File) => {\n    const metadata: FileMetadata = {\n      name: fileName,\n      size: file.size,\n      type: file.type,\n    };\n    // @todo\n    if (!multipart) {\n    }\n    const numberOfParts = Math.ceil(file.size / PART_SIZE);\n    const { uploadId, key } = await createMultipartUpload(handler);\n    const etags = await uploadAllParts({\n      file,\n      handler,\n      key,\n      numberOfParts,\n      uploadId,\n      onUploadProgress,\n    });\n    const completedData = await completeMultipart({\n      metadata,\n      key,\n      uploadId,\n      etags,\n      handler,\n    });\n    return {\n      uploadId,\n      key,\n      metadata,\n      url: \"\", // @todo with ACL public\n      access,\n      completedData,\n    };\n  }; // upload\n  return { upload } as {\n    upload: (arg0: string, arg1: File) => Promise<UploadCompletedData>;\n  };\n};\n"],
  "mappings": "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",
  "names": ["require_retry_operation", "__commonJSMin", "exports", "module", "RetryOperation", "timeouts", "options", "err", "currentTime", "timeout", "self", "fn", "timeoutOps", "counts", "mainError", "mainErrorCount", "i", "error", "message", "count", "require_retry", "__commonJSMin", "exports", "RetryOperation", "options", "timeouts", "opts", "key", "i", "b", "attempt", "random", "timeout", "obj", "methods", "method", "original", "op", "args", "callback", "err", "require_retry", "__commonJSMin", "exports", "module", "require_lib", "__commonJSMin", "exports", "module", "retrier", "retry", "fn", "opts", "run", "resolve", "reject", "options", "op", "bail", "err", "onError", "num", "runAttempt", "val", "import_async_retry", "CREATE_MULTIPART_STRING", "CREATE_PUT_PART_URL_STRING", "COMPLETE_MULTIPART_STRING", "MB", "PART_SIZE", "createMultipartUpload", "handler", "init", "CREATE_MULTIPART_STRING", "response", "res", "error", "getPutPartUrl", "partNumber", "uploadId", "key", "retry", "CREATE_PUT_PART_URL_STRING", "uploadOnePartRetry", "attempts", "url", "blob", "retryCount", "bail", "uploadAllParts", "options", "file", "numberOfParts", "onUploadProgress", "loaded", "uploadPromises", "_", "i", "start", "end", "percentage", "str", "completeMultipart", "args", "etags", "metadata", "COMPLETE_MULTIPART_STRING", "useUploadMultipart", "options", "access", "handler", "onUploadProgress", "multipart", "fileName", "file", "metadata", "numberOfParts", "PART_SIZE", "uploadId", "key", "createMultipartUpload", "etags", "uploadAllParts", "completedData", "completeMultipart"]
}
